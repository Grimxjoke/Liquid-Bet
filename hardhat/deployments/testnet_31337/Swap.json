{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Tokens.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\r\\n\\r\\n/*\\r\\n*@Authors: Paul Birnbaum, Spoyte.\\r\\n\\r\\n*@title: Swap Contract. \\r\\n*@notice: Creation of the Swap Smart Contract.\\r\\n*@dev: Allow the user to Bet on a specific Soccer team.\\r\\n*extra comment\\r\\n*WARNING I removed the ownable\\r\\n*/\\r\\ncontract Swap is ERC20, Ownable, ChainlinkClient {\\r\\n  using Chainlink for Chainlink.Request;\\r\\n\\r\\n  address public FranceTokenAddress;\\r\\n  address public BrasilTokenAddress;\\r\\n\\r\\n  /* chainlink params */\\r\\n  bytes32 private jobId;\\r\\n  uint256 private fee;\\r\\n  /* game status params */\\r\\n  uint256 public homeScore;\\r\\n  uint256 public awayScore;\\r\\n\\r\\n  uint8 public FinalResult = 0;\\r\\n  /* chainlink event */\\r\\n  event RequestMultipleFulfilled(\\r\\n    bytes32 indexed requestId,\\r\\n    uint256 homeScore,\\r\\n    uint256 awayScore\\r\\n  );\\r\\n\\r\\n  event DepositMade(\\r\\n    address indexed userAddress,\\r\\n    uint256 amount,\\r\\n    uint256 tokenReceived,\\r\\n    string functionName\\r\\n  );\\r\\n\\r\\n  event UserInformation(\\r\\n    address indexed userAddress,\\r\\n    uint256 amount_team1_wallet,\\r\\n    uint256 amount_team2_wallet\\r\\n  );\\r\\n\\r\\n  /*\\r\\n   *@notice: Constructor.\\r\\n   *@dev: Implement the two tokens contracts address at deployment.\\r\\n   */\\r\\n  constructor(\\r\\n    address _FranceTokenAddress,\\r\\n    address _BrasilTokenAddress,\\r\\n    address _LinkToken,\\r\\n    address _LinkOracle\\r\\n  ) ERC20(\\\"Liquidity Token\\\", \\\"LPT\\\") {\\r\\n    jobId = \\\"fa38023e44a84b6384c9411401904997\\\";\\r\\n    setChainlinkToken(_LinkToken);\\r\\n    setChainlinkOracle(_LinkOracle);\\r\\n    // 0,1 * 10**18 (Varies by network and job) (here 0.1 link as in testnets)\\r\\n    fee = (1 * LINK_DIVISIBILITY) / 10;\\r\\n\\r\\n    FranceTokenAddress = _FranceTokenAddress;\\r\\n    BrasilTokenAddress = _BrasilTokenAddress;\\r\\n  }\\r\\n\\r\\n  /*chainlink functions*/\\r\\n\\r\\n  /**\\r\\n   * @notice Request mutiple parameters from the oracle in a single transaction\\r\\n   */\\r\\n  function requestMultipleParameters() public {\\r\\n    Chainlink.Request memory req = buildChainlinkRequest(\\r\\n      jobId,\\r\\n      address(this),\\r\\n      this.fulfillMultipleParameters.selector\\r\\n    );\\r\\n    req.add(\\r\\n      \\\"urlRESULT\\\",\\r\\n      \\\"https://api.sportsdata.io/v3/soccer/scores/json/GamesByDate/2022-11-15?key=a5acc6cc44dc47fc9918198d29b33e00\\\"\\r\\n    );\\r\\n    req.add(\\\"pathHOME\\\", \\\"0,HomeTeamScore\\\");\\r\\n\\r\\n    req.add(\\\"pathAWAY\\\", \\\"0,AwayTeamScore\\\");\\r\\n\\r\\n    sendChainlinkRequest(req, fee); // MWR API.\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Fulfillment function for multiple parameters in a single request\\r\\n   * @dev This is called by the oracle. recordChainlinkFulfillment must be used.\\r\\n   */\\r\\n  function fulfillMultipleParameters(\\r\\n    bytes32 requestId,\\r\\n    uint256 homeResponse,\\r\\n    uint256 awayResponse\\r\\n  ) public recordChainlinkFulfillment(requestId) {\\r\\n    emit RequestMultipleFulfilled(requestId, homeResponse, awayResponse);\\r\\n    homeScore = homeResponse;\\r\\n    awayScore = awayResponse;\\r\\n    if (homeScore > awayScore) FinalResult = 1;\\r\\n    else if (homeScore == awayScore) FinalResult = 2;\\r\\n    else FinalResult = 3;\\r\\n  }\\r\\n\\r\\n  function withdrawLink() public onlyOwner {\\r\\n    LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\r\\n    require(\\r\\n      link.transfer(msg.sender, link.balanceOf(address(this))),\\r\\n      \\\"Unable to transfer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function withdrawMatic() public payable onlyOwner {\\r\\n    require(walletBalance() != 0, \\\"There is no Matic in the Contract\\\");\\r\\n    (bool sent, ) = payable(msg.sender).call{ value: walletBalance() }(\\\"\\\");\\r\\n    require(sent, \\\"Failure Coudn't send Matic\\\");\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   *@notice: Public function that shows the balance of France Tokens in the contract\\r\\n   *@return: Balance of the France Token in this contract.\\r\\n   */\\r\\n  function getReserveFrance() public view returns (uint256) {\\r\\n    uint256 FranceReserve = ERC20(FranceTokenAddress).balanceOf(address(this));\\r\\n    return (FranceReserve);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   *@notice: Public function that shows the balance of Brasil Tokens in the contract\\r\\n   *@return: Balance of the Brasil Token in this contract.\\r\\n   */\\r\\n  function getReserveBrasil() public view returns (uint256) {\\r\\n    uint256 BrasilReserve = ERC20(BrasilTokenAddress).balanceOf(address(this));\\r\\n    return (BrasilReserve);\\r\\n  }\\r\\n\\r\\n  function contractBalance() public view returns (uint256) {\\r\\n    return address(this).balance;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   *@notice: Public function that show the balance of Tokens in the User's Wallet\\r\\n   *@return: Balance of the France and Brasil Token in the User's Wallet.\\r\\n   */\\r\\n  function getBalanceWalletFrance() public view returns (uint256) {\\r\\n    uint256 balanceFranceToken = ERC20(FranceTokenAddress).balanceOf(\\r\\n      msg.sender\\r\\n    );\\r\\n    return (balanceFranceToken);\\r\\n  }\\r\\n\\r\\n  function getBalanceWalletBrasil() public view returns (uint256) {\\r\\n    uint256 balanceBrasilToken = ERC20(BrasilTokenAddress).balanceOf(\\r\\n      msg.sender\\r\\n    );\\r\\n    return (balanceBrasilToken);\\r\\n  }\\r\\n\\r\\n  function walletBalance() public view returns (uint256) {\\r\\n    return (msg.sender.balance);\\r\\n  }\\r\\n\\r\\n  function ownTokenContracts() public onlyOwner {\\r\\n    France(FranceTokenAddress).setSmartContractOwner();\\r\\n    Brasil(BrasilTokenAddress).setSmartContractOwner();\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   *@notice: Allow the Owner to add Liquidity in the Pool for the upcomming Users.\\r\\n   *@dev: This function is restricted to the Owner of the Contract.\\r\\n   *@dev: Need to approve the Contract address from each Tokens Contract before calling the function.\\r\\n   */\\r\\n\\r\\n  function addLiquidity(uint128 _amountTeamA, uint128 _amountTeamB)\\r\\n    public\\r\\n    onlyOwner\\r\\n  {\\r\\n    ERC20(FranceTokenAddress).transferFrom(\\r\\n      msg.sender,\\r\\n      address(this),\\r\\n      _amountTeamA\\r\\n    );\\r\\n\\r\\n    ERC20(BrasilTokenAddress).transferFrom(\\r\\n      msg.sender,\\r\\n      address(this),\\r\\n      _amountTeamB\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   *@notice: Allow the Owner to remove Liquidity in the Pool when the Bet is Over.\\r\\n   *@dev: This function is restricted to the Owner of the Contract.\\r\\n   */\\r\\n  function removeLiquidity() public onlyOwner {\\r\\n    ERC20(BrasilTokenAddress).transfer(msg.sender, getReserveBrasil());\\r\\n    ERC20(FranceTokenAddress).transfer(msg.sender, getReserveFrance());\\r\\n  }\\r\\n\\r\\n  function deposit_swapBRAtoFR() public payable {\\r\\n    require(msg.value > 0, \\\"You didn't provide any funds\\\");\\r\\n\\r\\n    France(FranceTokenAddress).mint(msg.sender, msg.value);\\r\\n    Brasil(BrasilTokenAddress).mint(msg.sender, msg.value);\\r\\n\\r\\n    uint256 franceTokenReserve = getReserveFrance();\\r\\n    uint256 brasilTokenReserve = getReserveBrasil() - msg.value;\\r\\n\\r\\n    ERC20(BrasilTokenAddress).transferFrom(\\r\\n      msg.sender,\\r\\n      address(this),\\r\\n      msg.value\\r\\n    );\\r\\n\\r\\n    uint256 frReturn = (msg.value * franceTokenReserve) /\\r\\n      (brasilTokenReserve + msg.value);\\r\\n\\r\\n    ERC20(FranceTokenAddress).transfer(msg.sender, frReturn);\\r\\n    emit DepositMade(msg.sender, msg.value, frReturn, \\\"deposit_swapBRAtoFR\\\");\\r\\n  }\\r\\n\\r\\n  function deposit_swapFRtoBRA() public payable {\\r\\n    require(msg.value > 0, \\\"You didn't provide any funds\\\");\\r\\n\\r\\n    uint256 franceTokenReserve = getReserveFrance() - msg.value;\\r\\n    uint256 brasilTokenReserve = getReserveBrasil();\\r\\n\\r\\n    France(FranceTokenAddress).mint(msg.sender, msg.value);\\r\\n    Brasil(BrasilTokenAddress).mint(msg.sender, msg.value);\\r\\n\\r\\n    ERC20(FranceTokenAddress).transferFrom(\\r\\n      msg.sender,\\r\\n      address(this),\\r\\n      msg.value\\r\\n    );\\r\\n\\r\\n    uint256 braReturn = (msg.value * brasilTokenReserve) /\\r\\n      (franceTokenReserve + msg.value);\\r\\n\\r\\n    ERC20(BrasilTokenAddress).transfer(msg.sender, braReturn);\\r\\n\\r\\n    emit DepositMade(msg.sender, msg.value, braReturn, \\\"deposit_swapFRtoBRA\\\");\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   *@notice: User send back the Token and Swap it for some ETH/MATIC If the User wins his bet.\\r\\n   *@notice: User send back the token but don't swap it If he losses.\\r\\n   *@dev: Function to be call when the game is over.\\r\\n   */\\r\\n\\r\\n  function gameOver() public {\\r\\n    require(FinalResult > 0, \\\"The match is not finish yet\\\");\\r\\n\\r\\n    uint256 balanceFranceToken = getBalanceWalletFrance();\\r\\n    uint256 balanceBrasilToken = getBalanceWalletBrasil();\\r\\n\\r\\n    if (FinalResult == 1) {\\r\\n      ERC20(FranceTokenAddress).transferFrom(\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        balanceFranceToken\\r\\n      );\\r\\n      ERC20(BrasilTokenAddress).transferFrom(\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        balanceBrasilToken\\r\\n      );\\r\\n      (bool sent, ) = payable(msg.sender).call{ value: balanceFranceToken }(\\\"\\\");\\r\\n      require(sent, \\\"Failed to send Ether\\\");\\r\\n    } else if (FinalResult == 3) {\\r\\n      ERC20(BrasilTokenAddress).transferFrom(\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        balanceBrasilToken\\r\\n      );\\r\\n      ERC20(FranceTokenAddress).transferFrom(\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        balanceFranceToken\\r\\n      );\\r\\n      (bool sent, ) = payable(msg.sender).call{ value: balanceBrasilToken }(\\\"\\\");\\r\\n      require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n    // In case of a draw, EXPERIMENTAL\\r\\n    else if (FinalResult == 2) {\\r\\n      uint256 total = balanceBrasilToken + balanceFranceToken;\\r\\n      ERC20(FranceTokenAddress).transferFrom(\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        balanceFranceToken\\r\\n      );\\r\\n      ERC20(BrasilTokenAddress).transferFrom(\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        balanceBrasilToken\\r\\n      );\\r\\n\\r\\n      (bool sent, ) = payable(msg.sender).call{ value: (total / 2) }(\\\"\\\");\\r\\n      require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  fallback() external payable {}\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.4\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/*\\r\\n*@Author: Paul Birnbaum.\\r\\n\\r\\n*@title: France Token . \\r\\n*@notice: Creation of the France Token.\\r\\n*@dev: Will create 10000 tokens and can mint more later.\\r\\nextra comment\\r\\n*/\\r\\ncontract France is ERC20 {\\r\\n  constructor(uint16 oddTeam) ERC20(\\\"France\\\", \\\"FR\\\") {\\r\\n    _mint(msg.sender, oddTeam * 10**decimals());\\r\\n  }\\r\\n\\r\\n  bool isSmartContractOwnerSet = false;\\r\\n  address public smartContractOwner;\\r\\n\\r\\n  function setSmartContractOwner() external {\\r\\n    require(\\r\\n      isSmartContractOwnerSet == false,\\r\\n      \\\"This Conctract is not the Contract's Owner\\\"\\r\\n    );\\r\\n    smartContractOwner = msg.sender;\\r\\n    isSmartContractOwnerSet = true;\\r\\n  }\\r\\n\\r\\n  modifier onlySmartContractOwner() {\\r\\n    require(\\r\\n      isSmartContractOwnerSet && msg.sender == smartContractOwner,\\r\\n      \\\"You are not the Smart Contract Owner\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  //@notice: Allow to mint more token when the user want to make a bet\\r\\n  function mint(address _address, uint256 _amount)\\r\\n    external\\r\\n    onlySmartContractOwner\\r\\n  {\\r\\n    _mint(_address, _amount);\\r\\n  }\\r\\n\\r\\n  // 0xde12A52cd5AB09b995404f7145A77b621eB5946cd\\r\\n}\\r\\n\\r\\n/*\\r\\n *@title: Brasil Token .\\r\\n *@notice: Creation of the Brasil Token.\\r\\n *@dev: Will create 10000 tokens and can mint more later.\\r\\n */\\r\\ncontract Brasil is ERC20 {\\r\\n  constructor(uint16 oddTeam) ERC20(\\\"Brasil\\\", \\\"BRA\\\") {\\r\\n    _mint(msg.sender, oddTeam * 10**decimals());\\r\\n  }\\r\\n\\r\\n  bool isSmartContractOwnerSet = false;\\r\\n  address public smartContractOwner;\\r\\n\\r\\n  function setSmartContractOwner() external {\\r\\n    require(\\r\\n      isSmartContractOwnerSet == false,\\r\\n      \\\"This Conctract is not the Contract's Owner\\\"\\r\\n    );\\r\\n    smartContractOwner = msg.sender;\\r\\n    isSmartContractOwnerSet = true;\\r\\n  }\\r\\n\\r\\n  modifier onlySmartContractOwner() {\\r\\n    require(\\r\\n      isSmartContractOwnerSet && msg.sender == smartContractOwner,\\r\\n      \\\"You are not the Smart Contract Owner\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  //@notice: Allow to mint more token when the user want to make a bet\\r\\n  function mint(address _address, uint256 _amount)\\r\\n    external\\r\\n    onlySmartContractOwner\\r\\n  {\\r\\n    _mint(_address, _amount);\\r\\n  }\\r\\n\\r\\n  // 0xde12A52cd5AB09b995404f7145A77b621eB5946cd\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.4\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"versionPragma\":\">=0.4.19\"},\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x0b80e3f7b9038Cc182b1F647F907eD8DB00aC0Ff","bytecode":"0x60806040526001600a556000601260006101000a81548160ff021916908360ff1602179055503480156200003257600080fd5b50604051620051cb380380620051cb833981810160405281019062000058919062000435565b6040518060400160405280600f81526020017f4c697175696469747920546f6b656e00000000000000000000000000000000008152506040518060400160405280600381526020017f4c505400000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000dc9291906200036e565b508060049080519060200190620000f59291906200036e565b505050620001186200010c6200021860201b60201c565b6200022060201b60201c565b7f6661333830323365343461383462363338346339343131343031393034393937600e819055506200015082620002e660201b60201c565b62000161816200032a60201b60201c565b600a670de0b6b3a764000060016200017a9190620004d9565b620001869190620004a1565b600f8190555083600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000655565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8280546200037c9062000578565b90600052602060002090601f016020900481019282620003a05760008555620003ec565b82601f10620003bb57805160ff1916838001178555620003ec565b82800160010185558215620003ec579182015b82811115620003eb578251825591602001919060010190620003ce565b5b509050620003fb9190620003ff565b5090565b5b808211156200041a57600081600090555060010162000400565b5090565b6000815190506200042f816200063b565b92915050565b600080600080608085870312156200044c57600080fd5b60006200045c878288016200041e565b94505060206200046f878288016200041e565b935050604062000482878288016200041e565b925050606062000495878288016200041e565b91505092959194509250565b6000620004ae826200056e565b9150620004bb836200056e565b925082620004ce57620004cd620005dd565b5b828204905092915050565b6000620004e6826200056e565b9150620004f3836200056e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200052f576200052e620005ae565b5b828202905092915050565b600062000547826200054e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200059157607f821691505b60208210811415620005a857620005a76200060c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b62000646816200053a565b81146200065257600080fd5b50565b614b6680620006656000396000f3fe6080604052600436106102085760003560e01c8063715018a611610118578063a9059cbb116100a0578063d1d6a2d61161006f578063d1d6a2d6146106a8578063d38d9639146106d3578063dd62ed3e146106fe578063f2fde38b1461073b578063fa4be622146107645761020f565b8063a9059cbb146105fe578063b3af31241461063b578063bdb337d114610666578063cd0a314b1461067d5761020f565b80638da5cb5b116100e75780638da5cb5b146105295780638dc654a21461055457806394b3886c1461056b57806395d89b4114610596578063a457c2d7146105c15761020f565b8063715018a6146104b4578063810074c6146104cb5780638b7afe2e146104d55780638cbd0e9c146105005761020f565b806337d36fef1161019b5780634795db521161016a5780634795db52146103f35780634a3afb471461041e57806367b9a286146104355780636db5fc9c1461044c57806370a08231146104775761020f565b806337d36fef1461034b57806339509351146103745780633a3af170146103b1578063422f8edf146103dc5761020f565b806329e8dbee116101d757806329e8dbee146102e15780632fa70b73146102eb578063313ce567146102f557806334a5462c146103205761020f565b806306fdde0314610211578063095ea7b31461023c57806318160ddd1461027957806323b872dd146102a45761020f565b3661020f57005b005b34801561021d57600080fd5b5061022661078f565b6040516102339190613d8d565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e91906136de565b610821565b6040516102709190613d72565b60405180910390f35b34801561028557600080fd5b5061028e610844565b60405161029b9190613fcf565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c6919061368f565b61084e565b6040516102d89190613d72565b60405180910390f35b6102e961087d565b005b6102f3610bde565b005b34801561030157600080fd5b5061030a610f3f565b604051610317919061408b565b60405180910390f35b34801561032c57600080fd5b50610335610f48565b604051610342919061408b565b60405180910390f35b34801561035757600080fd5b50610372600480360381019061036d9190613743565b610f5b565b005b34801561038057600080fd5b5061039b600480360381019061039691906136de565b611126565b6040516103a89190613d72565b60405180910390f35b3480156103bd57600080fd5b506103c661115d565b6040516103d39190613fcf565b60405180910390f35b3480156103e857600080fd5b506103f1611214565b005b3480156103ff57600080fd5b50610408611322565b6040516104159190613fcf565b60405180910390f35b34801561042a57600080fd5b506104336113d9565b005b34801561044157600080fd5b5061044a611561565b005b34801561045857600080fd5b506104616116d9565b60405161046e9190613fcf565b60405180910390f35b34801561048357600080fd5b5061049e6004803603810190610499919061362a565b6116df565b6040516104ab9190613fcf565b60405180910390f35b3480156104c057600080fd5b506104c9611727565b005b6104d361173b565b005b3480156104e157600080fd5b506104ea611844565b6040516104f79190613fcf565b60405180910390f35b34801561050c57600080fd5b5061052760048036038101906105229190613792565b61184c565b005b34801561053557600080fd5b5061053e6119bc565b60405161054b9190613bfd565b60405180910390f35b34801561056057600080fd5b506105696119e6565b005b34801561057757600080fd5b50610580611b51565b60405161058d9190613fcf565b60405180910390f35b3480156105a257600080fd5b506105ab611c08565b6040516105b89190613d8d565b60405180910390f35b3480156105cd57600080fd5b506105e860048036038101906105e391906136de565b611c9a565b6040516105f59190613d72565b60405180910390f35b34801561060a57600080fd5b50610625600480360381019061062091906136de565b611d11565b6040516106329190613d72565b60405180910390f35b34801561064757600080fd5b50610650611d34565b60405161065d9190613bfd565b60405180910390f35b34801561067257600080fd5b5061067b611d5a565b005b34801561068957600080fd5b50610692612479565b60405161069f9190613fcf565b60405180910390f35b3480156106b457600080fd5b506106bd612498565b6040516106ca9190613fcf565b60405180910390f35b3480156106df57600080fd5b506106e861254f565b6040516106f59190613fcf565b60405180910390f35b34801561070a57600080fd5b5061072560048036038101906107209190613653565b612555565b6040516107329190613fcf565b60405180910390f35b34801561074757600080fd5b50610762600480360381019061075d919061362a565b6125dc565b005b34801561077057600080fd5b50610779612660565b6040516107869190613bfd565b60405180910390f35b60606003805461079e9061447f565b80601f01602080910402602001604051908101604052809291908181526020018280546107ca9061447f565b80156108175780601f106107ec57610100808354040283529160200191610817565b820191906000526020600020905b8154815290600101906020018083116107fa57829003601f168201915b5050505050905090565b60008061082c612686565b905061083981858561268e565b600191505092915050565b6000600254905090565b600080610859612686565b9050610866858285612859565b6108718585856128e5565b60019150509392505050565b600034116108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790613f6f565b60405180910390fd5b6000346108cb611b51565b6108d5919061433b565b905060006108e161115d565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b8152600401610940929190613c86565b600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b50505050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b81526004016109cf929190613c86565b600060405180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330346040518463ffffffff1660e01b8152600401610a6093929190613c4f565b602060405180830381600087803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab2919061371a565b5060003483610ac191906140e9565b8234610acd91906142e1565b610ad7919061413f565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b36929190613c86565b602060405180830381600087803b158015610b5057600080fd5b505af1158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b88919061371a565b503373ffffffffffffffffffffffffffffffffffffffff167feff24ae1a526a59e44052f06c0e3fc3e2328bc71d8eaadc772a1a42ce563f3313483604051610bd192919061404f565b60405180910390a2505050565b60003411610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1890613f6f565b60405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b8152600401610c7e929190613c86565b600060405180830381600087803b158015610c9857600080fd5b505af1158015610cac573d6000803e3d6000fd5b50505050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b8152600401610d0d929190613c86565b600060405180830381600087803b158015610d2757600080fd5b505af1158015610d3b573d6000803e3d6000fd5b505050506000610d49611b51565b9050600034610d5661115d565b610d60919061433b565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330346040518463ffffffff1660e01b8152600401610dc193929190613c4f565b602060405180830381600087803b158015610ddb57600080fd5b505af1158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e13919061371a565b5060003482610e2291906140e9565b8334610e2e91906142e1565b610e38919061413f565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610e97929190613c86565b602060405180830381600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee9919061371a565b503373ffffffffffffffffffffffffffffffffffffffff167feff24ae1a526a59e44052f06c0e3fc3e2328bc71d8eaadc772a1a42ce563f3313483604051610f32929190614013565b60405180910390a2505050565b60006012905090565b601260009054906101000a900460ff1681565b82600b600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490613f4f565b60405180910390fd5b600b600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2837f654e38d2a93112689c11f1c8b02342b0e0adab42ec9f0d00ea593cf9dd9ef8eb8484604051611092929190613fea565b60405180910390a2826010819055508160118190555060115460105411156110d5576001601260006101000a81548160ff021916908360ff160217905550611120565b6011546010541415611102576002601260006101000a81548160ff021916908360ff16021790555061111f565b6003601260006101000a81548160ff021916908360ff1602179055505b5b50505050565b600080611131612686565b90506111528185856111438589612555565b61114d91906140e9565b61268e565b600191505092915050565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111bb9190613bfd565b60206040518083038186803b1580156111d357600080fd5b505afa1580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b91906137ce565b90508091505090565b61121c612b66565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398faf2cb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b50505050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398faf2cb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561130857600080fd5b505af115801561131c573d6000803e3d6000fd5b50505050565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016113809190613bfd565b60206040518083038186803b15801561139857600080fd5b505afa1580156113ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d091906137ce565b90508091505090565b60006113ef600e54306337d36fef60e01b612be4565b90506114536040518060400160405280600981526020017f75726c524553554c5400000000000000000000000000000000000000000000008152506040518060a00160405280606b8152602001614ac6606b913983612c159092919063ffffffff16565b6114d26040518060400160405280600881526020017f70617468484f4d450000000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f302c486f6d655465616d53636f7265000000000000000000000000000000000081525083612c159092919063ffffffff16565b6115516040518060400160405280600881526020017f70617468415741590000000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f302c417761795465616d53636f7265000000000000000000000000000000000081525083612c159092919063ffffffff16565b61155d81600f54612c48565b5050565b611569612b66565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336115b061115d565b6040518363ffffffff1660e01b81526004016115cd929190613c86565b602060405180830381600087803b1580156115e757600080fd5b505af11580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061371a565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33611667611b51565b6040518363ffffffff1660e01b8152600401611684929190613c86565b602060405180830381600087803b15801561169e57600080fd5b505af11580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d6919061371a565b50565b60105481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61172f612b66565b6117396000612c7f565b565b611743612b66565b600061174d612479565b141561178e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178590613eef565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166117af612479565b6040516117bb90613be8565b60006040518083038185875af1925050503d80600081146117f8576040519150601f19603f3d011682016040523d82523d6000602084013e6117fd565b606091505b5050905080611841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183890613f8f565b60405180910390fd5b50565b600047905090565b611854612b66565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016118b393929190613c18565b602060405180830381600087803b1580156118cd57600080fd5b505af11580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611905919061371a565b50600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161196593929190613c18565b602060405180830381600087803b15801561197f57600080fd5b505af1158015611993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b7919061371a565b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6119ee612b66565b60006119f8612d45565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a509190613bfd565b60206040518083038186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa091906137ce565b6040518363ffffffff1660e01b8152600401611abd929190613c86565b602060405180830381600087803b158015611ad757600080fd5b505af1158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f919061371a565b611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4590613eaf565b60405180910390fd5b50565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611baf9190613bfd565b60206040518083038186803b158015611bc757600080fd5b505afa158015611bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bff91906137ce565b90508091505090565b606060048054611c179061447f565b80601f0160208091040260200160405190810160405280929190818152602001828054611c439061447f565b8015611c905780601f10611c6557610100808354040283529160200191611c90565b820191906000526020600020905b815481529060010190602001808311611c7357829003601f168201915b5050505050905090565b600080611ca5612686565b90506000611cb38286612555565b905083811015611cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cef90613faf565b60405180910390fd5b611d05828686840361268e565b60019250505092915050565b600080611d1c612686565b9050611d298185856128e5565b600191505092915050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601260009054906101000a900460ff1660ff1611611daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da690613e8f565b60405180910390fd5b6000611db9611322565b90506000611dc5612498565b90506001601260009054906101000a900460ff1660ff161415611ff857600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611e4193929190613c4f565b602060405180830381600087803b158015611e5b57600080fd5b505af1158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e93919061371a565b50600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611ef393929190613c4f565b602060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f45919061371a565b5060003373ffffffffffffffffffffffffffffffffffffffff1683604051611f6c90613be8565b60006040518083038185875af1925050503d8060008114611fa9576040519150601f19603f3d011682016040523d82523d6000602084013e611fae565b606091505b5050905080611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe990613e6f565b60405180910390fd5b50612475565b6003601260009054906101000a900460ff1660ff16141561222957600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161207293929190613c4f565b602060405180830381600087803b15801561208c57600080fd5b505af11580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c4919061371a565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161212493929190613c4f565b602060405180830381600087803b15801561213e57600080fd5b505af1158015612152573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612176919061371a565b5060003373ffffffffffffffffffffffffffffffffffffffff168260405161219d90613be8565b60006040518083038185875af1925050503d80600081146121da576040519150601f19603f3d011682016040523d82523d6000602084013e6121df565b606091505b5050905080612223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221a90613e6f565b60405180910390fd5b50612474565b6002601260009054906101000a900460ff1660ff161415612473576000828261225291906140e9565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016122b393929190613c4f565b602060405180830381600087803b1580156122cd57600080fd5b505af11580156122e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612305919061371a565b50600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161236593929190613c4f565b602060405180830381600087803b15801561237f57600080fd5b505af1158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b7919061371a565b5060003373ffffffffffffffffffffffffffffffffffffffff166002836123de919061413f565b6040516123ea90613be8565b60006040518083038185875af1925050503d8060008114612427576040519150601f19603f3d011682016040523d82523d6000602084013e61242c565b606091505b5050905080612470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246790613e6f565b60405180910390fd5b50505b5b5b5050565b60003373ffffffffffffffffffffffffffffffffffffffff1631905090565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016124f69190613bfd565b60206040518083038186803b15801561250e57600080fd5b505afa158015612522573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254691906137ce565b90508091505090565b60115481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6125e4612b66565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264b90613dcf565b60405180910390fd5b61265d81612c7f565b50565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f590613f2f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561276e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276590613def565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161284c9190613fcf565b60405180910390a3505050565b60006128658484612555565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146128df57818110156128d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c890613e2f565b60405180910390fd5b6128de848484840361268e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294c90613f0f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bc90613daf565b60405180910390fd5b6129d0838383612d6f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4d90613e4f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ae991906140e9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b4d9190613fcf565b60405180910390a3612b60848484612d74565b50505050565b612b6e612686565b73ffffffffffffffffffffffffffffffffffffffff16612b8c6119bc565b73ffffffffffffffffffffffffffffffffffffffff1614612be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd990613ecf565b60405180910390fd5b565b612bec613525565b612bf4613525565b612c0b85858584612d79909392919063ffffffff16565b9150509392505050565b612c2c828460800151612e2990919063ffffffff16565b612c43818460800151612e2990919063ffffffff16565b505050565b6000612c77600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484612e4e565b905092915050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b505050565b505050565b612d81613525565b612d918560800151610100612f1a565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b612e368260038351612f84565b612e49818361310990919063ffffffff16565b505050565b600080600a549050600181612e6391906140e9565b600a819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401612ea4989796959493929190613caf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612f0f8683868461312b565b925050509392505050565b612f22613592565b6000602083612f3191906144df565b14612f5d57602082612f4391906144df565b6020612f4f919061433b565b82612f5a91906140e9565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611612fbb57612fb58160058460ff16901b60ff1617846132cf90919063ffffffff16565b50613104565b60ff8167ffffffffffffffff161161301157612fea601860058460ff16901b17846132cf90919063ffffffff16565b5061300b8167ffffffffffffffff166001856132ef9092919063ffffffff16565b50613103565b61ffff8167ffffffffffffffff161161306857613041601960058460ff16901b17846132cf90919063ffffffff16565b506130628167ffffffffffffffff166002856132ef9092919063ffffffff16565b50613102565b63ffffffff8167ffffffffffffffff16116130c15761309a601a60058460ff16901b17846132cf90919063ffffffff16565b506130bb8167ffffffffffffffff166004856132ef9092919063ffffffff16565b50613101565b6130de601b60058460ff16901b17846132cf90919063ffffffff16565b506130ff8167ffffffffffffffff166008856132ef9092919063ffffffff16565b505b5b5b5b505050565b613111613592565b61312383846000015151848551613311565b905092915050565b60003084604051602001613140929190613bbc565b60405160208183030381529060405280519060200120905084600b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b815260040161323693929190613d34565b602060405180830381600087803b15801561325057600080fd5b505af1158015613264573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613288919061371a565b6132c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132be90613e0f565b60405180910390fd5b949350505050565b6132d7613592565b6132e78384600001515184613400565b905092915050565b6132f7613592565b613308848560000151518585613457565b90509392505050565b613319613592565b825182111561332757600080fd5b8460200151828561333891906140e9565b111561336d5761336c85600261335d8860200151888761335891906140e9565b6134e5565b61336791906142e1565b613501565b5b60008086518051876020830101935080888701111561338c5787860182525b60208701925050505b602084106133d357805182526020826133ae91906140e9565b91506020816133bd91906140e9565b90506020846133cc919061433b565b9350613395565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b613408613592565b8360200151831061342e5761342d846002866020015161342891906142e1565b613501565b5b835180516020858301018481538186141561344a576001820183525b5050508390509392505050565b61345f613592565b8460200151848361347091906140e9565b111561349857613497856002868561348891906140e9565b61349291906142e1565b613501565b5b60006001836101006134aa91906141c3565b6134b4919061433b565b905085518386820101858319825116178152815185880111156134d75784870182525b505085915050949350505050565b6000818311156134f7578290506134fb565b8190505b92915050565b6000826000015190506135148383612f1a565b5061351f8382613109565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161358c613592565b81525090565b604051806040016040528060608152602001600081525090565b6000813590506135bb81614a52565b92915050565b6000815190506135d081614a69565b92915050565b6000813590506135e581614a80565b92915050565b6000813590506135fa81614a97565b92915050565b60008135905061360f81614aae565b92915050565b60008151905061362481614aae565b92915050565b60006020828403121561363c57600080fd5b600061364a848285016135ac565b91505092915050565b6000806040838503121561366657600080fd5b6000613674858286016135ac565b9250506020613685858286016135ac565b9150509250929050565b6000806000606084860312156136a457600080fd5b60006136b2868287016135ac565b93505060206136c3868287016135ac565b92505060406136d486828701613600565b9150509250925092565b600080604083850312156136f157600080fd5b60006136ff858286016135ac565b925050602061371085828601613600565b9150509250929050565b60006020828403121561372c57600080fd5b600061373a848285016135c1565b91505092915050565b60008060006060848603121561375857600080fd5b6000613766868287016135d6565b935050602061377786828701613600565b925050604061378886828701613600565b9150509250925092565b600080604083850312156137a557600080fd5b60006137b3858286016135eb565b92505060206137c4858286016135eb565b9150509250929050565b6000602082840312156137e057600080fd5b60006137ee84828501613615565b91505092915050565b6138008161436f565b82525050565b61380f81614381565b82525050565b61381e8161438d565b82525050565b61382d81614397565b82525050565b600061383e826140a6565b61384881856140bc565b935061385881856020860161444c565b6138618161459d565b840191505092915050565b61387d61387882614416565b6144b1565b82525050565b600061388e826140b1565b61389881856140d8565b93506138a881856020860161444c565b6138b18161459d565b840191505092915050565b60006138c96023836140d8565b91506138d4826145c8565b604082019050919050565b60006138ec6026836140d8565b91506138f782614617565b604082019050919050565b600061390f6022836140d8565b915061391a82614666565b604082019050919050565b60006139326013836140d8565b915061393d826146b5565b602082019050919050565b60006139556023836140d8565b9150613960826146de565b604082019050919050565b6000613978601d836140d8565b91506139838261472d565b602082019050919050565b600061399b6026836140d8565b91506139a682614756565b604082019050919050565b60006139be6014836140d8565b91506139c9826147a5565b602082019050919050565b60006139e1601b836140d8565b91506139ec826147ce565b602082019050919050565b6000613a046013836140d8565b9150613a0f826147f7565b602082019050919050565b6000613a276012836140d8565b9150613a3282614820565b602082019050919050565b6000613a4a6020836140d8565b9150613a5582614849565b602082019050919050565b6000613a6d6021836140d8565b9150613a7882614872565b604082019050919050565b6000613a906025836140d8565b9150613a9b826148c1565b604082019050919050565b6000613ab36000836140cd565b9150613abe82614910565b600082019050919050565b6000613ad66024836140d8565b9150613ae182614913565b604082019050919050565b6000613af96028836140d8565b9150613b0482614962565b604082019050919050565b6000613b1c601c836140d8565b9150613b27826149b1565b602082019050919050565b6000613b3f601a836140d8565b9150613b4a826149da565b602082019050919050565b6000613b626025836140d8565b9150613b6d82614a03565b604082019050919050565b613b818161443a565b82525050565b613b90816143ff565b82525050565b613ba7613ba2826143ff565b6144d5565b82525050565b613bb681614409565b82525050565b6000613bc8828561386c565b601482019150613bd88284613b96565b6020820191508190509392505050565b6000613bf382613aa6565b9150819050919050565b6000602082019050613c1260008301846137f7565b92915050565b6000606082019050613c2d60008301866137f7565b613c3a60208301856137f7565b613c476040830184613b78565b949350505050565b6000606082019050613c6460008301866137f7565b613c7160208301856137f7565b613c7e6040830184613b87565b949350505050565b6000604082019050613c9b60008301856137f7565b613ca86020830184613b87565b9392505050565b600061010082019050613cc5600083018b6137f7565b613cd2602083018a613b87565b613cdf6040830189613815565b613cec60608301886137f7565b613cf96080830187613824565b613d0660a0830186613b87565b613d1360c0830185613b87565b81810360e0830152613d258184613833565b90509998505050505050505050565b6000606082019050613d4960008301866137f7565b613d566020830185613b87565b8181036040830152613d688184613833565b9050949350505050565b6000602082019050613d876000830184613806565b92915050565b60006020820190508181036000830152613da78184613883565b905092915050565b60006020820190508181036000830152613dc8816138bc565b9050919050565b60006020820190508181036000830152613de8816138df565b9050919050565b60006020820190508181036000830152613e0881613902565b9050919050565b60006020820190508181036000830152613e2881613948565b9050919050565b60006020820190508181036000830152613e488161396b565b9050919050565b60006020820190508181036000830152613e688161398e565b9050919050565b60006020820190508181036000830152613e88816139b1565b9050919050565b60006020820190508181036000830152613ea8816139d4565b9050919050565b60006020820190508181036000830152613ec881613a1a565b9050919050565b60006020820190508181036000830152613ee881613a3d565b9050919050565b60006020820190508181036000830152613f0881613a60565b9050919050565b60006020820190508181036000830152613f2881613a83565b9050919050565b60006020820190508181036000830152613f4881613ac9565b9050919050565b60006020820190508181036000830152613f6881613aec565b9050919050565b60006020820190508181036000830152613f8881613b0f565b9050919050565b60006020820190508181036000830152613fa881613b32565b9050919050565b60006020820190508181036000830152613fc881613b55565b9050919050565b6000602082019050613fe46000830184613b87565b92915050565b6000604082019050613fff6000830185613b87565b61400c6020830184613b87565b9392505050565b60006060820190506140286000830185613b87565b6140356020830184613b87565b818103604083015261404681613925565b90509392505050565b60006060820190506140646000830185613b87565b6140716020830184613b87565b8181036040830152614082816139f7565b90509392505050565b60006020820190506140a06000830184613bad565b92915050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006140f4826143ff565b91506140ff836143ff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561413457614133614510565b5b828201905092915050565b600061414a826143ff565b9150614155836143ff565b9250826141655761416461453f565b5b828204905092915050565b6000808291508390505b60018511156141ba5780860481111561419657614195614510565b5b60018516156141a55780820291505b80810290506141b3856145bb565b945061417a565b94509492505050565b60006141ce826143ff565b91506141d9836143ff565b92506142067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461420e565b905092915050565b60008261421e57600190506142da565b8161422c57600090506142da565b8160018114614242576002811461424c5761427b565b60019150506142da565b60ff84111561425e5761425d614510565b5b8360020a91508482111561427557614274614510565b5b506142da565b5060208310610133831016604e8410600b84101617156142b05782820a9050838111156142ab576142aa614510565b5b6142da565b6142bd8484846001614170565b925090508184048111156142d4576142d3614510565b5b81810290505b9392505050565b60006142ec826143ff565b91506142f7836143ff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143305761432f614510565b5b828202905092915050565b6000614346826143ff565b9150614351836143ff565b92508282101561436457614363614510565b5b828203905092915050565b600061437a826143df565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061442182614428565b9050919050565b6000614433826143df565b9050919050565b6000614445826143c3565b9050919050565b60005b8381101561446a57808201518184015260208101905061444f565b83811115614479576000848401525b50505050565b6000600282049050600182168061449757607f821691505b602082108114156144ab576144aa61456e565b5b50919050565b60006144bc826144c3565b9050919050565b60006144ce826145ae565b9050919050565b6000819050919050565b60006144ea826143ff565b91506144f5836143ff565b9250826145055761450461453f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f6465706f7369745f73776170425241746f465200000000000000000000000000600082015250565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b7f546865206d61746368206973206e6f742066696e697368207965740000000000600082015250565b7f6465706f7369745f737761704652746f42524100000000000000000000000000600082015250565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5468657265206973206e6f204d6174696320696e2074686520436f6e7472616360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b50565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b7f596f75206469646e27742070726f7669646520616e792066756e647300000000600082015250565b7f4661696c75726520436f75646e27742073656e64204d61746963000000000000600082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b614a5b8161436f565b8114614a6657600080fd5b50565b614a7281614381565b8114614a7d57600080fd5b50565b614a898161438d565b8114614a9457600080fd5b50565b614aa0816143c3565b8114614aab57600080fd5b50565b614ab7816143ff565b8114614ac257600080fd5b5056fe68747470733a2f2f6170692e73706f727473646174612e696f2f76332f736f636365722f73636f7265732f6a736f6e2f47616d65734279446174652f323032322d31312d31353f6b65793d6135616363366363343464633437666339393138313938643239623333653030a2646970667358221220a9399e94c2d1f5668d0ff44b69481be8e4454829d1873049a836ae94bf9e780464736f6c63430008040033","deployedBytecode":"0x6080604052600436106102085760003560e01c8063715018a611610118578063a9059cbb116100a0578063d1d6a2d61161006f578063d1d6a2d6146106a8578063d38d9639146106d3578063dd62ed3e146106fe578063f2fde38b1461073b578063fa4be622146107645761020f565b8063a9059cbb146105fe578063b3af31241461063b578063bdb337d114610666578063cd0a314b1461067d5761020f565b80638da5cb5b116100e75780638da5cb5b146105295780638dc654a21461055457806394b3886c1461056b57806395d89b4114610596578063a457c2d7146105c15761020f565b8063715018a6146104b4578063810074c6146104cb5780638b7afe2e146104d55780638cbd0e9c146105005761020f565b806337d36fef1161019b5780634795db521161016a5780634795db52146103f35780634a3afb471461041e57806367b9a286146104355780636db5fc9c1461044c57806370a08231146104775761020f565b806337d36fef1461034b57806339509351146103745780633a3af170146103b1578063422f8edf146103dc5761020f565b806329e8dbee116101d757806329e8dbee146102e15780632fa70b73146102eb578063313ce567146102f557806334a5462c146103205761020f565b806306fdde0314610211578063095ea7b31461023c57806318160ddd1461027957806323b872dd146102a45761020f565b3661020f57005b005b34801561021d57600080fd5b5061022661078f565b6040516102339190613d8d565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e91906136de565b610821565b6040516102709190613d72565b60405180910390f35b34801561028557600080fd5b5061028e610844565b60405161029b9190613fcf565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c6919061368f565b61084e565b6040516102d89190613d72565b60405180910390f35b6102e961087d565b005b6102f3610bde565b005b34801561030157600080fd5b5061030a610f3f565b604051610317919061408b565b60405180910390f35b34801561032c57600080fd5b50610335610f48565b604051610342919061408b565b60405180910390f35b34801561035757600080fd5b50610372600480360381019061036d9190613743565b610f5b565b005b34801561038057600080fd5b5061039b600480360381019061039691906136de565b611126565b6040516103a89190613d72565b60405180910390f35b3480156103bd57600080fd5b506103c661115d565b6040516103d39190613fcf565b60405180910390f35b3480156103e857600080fd5b506103f1611214565b005b3480156103ff57600080fd5b50610408611322565b6040516104159190613fcf565b60405180910390f35b34801561042a57600080fd5b506104336113d9565b005b34801561044157600080fd5b5061044a611561565b005b34801561045857600080fd5b506104616116d9565b60405161046e9190613fcf565b60405180910390f35b34801561048357600080fd5b5061049e6004803603810190610499919061362a565b6116df565b6040516104ab9190613fcf565b60405180910390f35b3480156104c057600080fd5b506104c9611727565b005b6104d361173b565b005b3480156104e157600080fd5b506104ea611844565b6040516104f79190613fcf565b60405180910390f35b34801561050c57600080fd5b5061052760048036038101906105229190613792565b61184c565b005b34801561053557600080fd5b5061053e6119bc565b60405161054b9190613bfd565b60405180910390f35b34801561056057600080fd5b506105696119e6565b005b34801561057757600080fd5b50610580611b51565b60405161058d9190613fcf565b60405180910390f35b3480156105a257600080fd5b506105ab611c08565b6040516105b89190613d8d565b60405180910390f35b3480156105cd57600080fd5b506105e860048036038101906105e391906136de565b611c9a565b6040516105f59190613d72565b60405180910390f35b34801561060a57600080fd5b50610625600480360381019061062091906136de565b611d11565b6040516106329190613d72565b60405180910390f35b34801561064757600080fd5b50610650611d34565b60405161065d9190613bfd565b60405180910390f35b34801561067257600080fd5b5061067b611d5a565b005b34801561068957600080fd5b50610692612479565b60405161069f9190613fcf565b60405180910390f35b3480156106b457600080fd5b506106bd612498565b6040516106ca9190613fcf565b60405180910390f35b3480156106df57600080fd5b506106e861254f565b6040516106f59190613fcf565b60405180910390f35b34801561070a57600080fd5b5061072560048036038101906107209190613653565b612555565b6040516107329190613fcf565b60405180910390f35b34801561074757600080fd5b50610762600480360381019061075d919061362a565b6125dc565b005b34801561077057600080fd5b50610779612660565b6040516107869190613bfd565b60405180910390f35b60606003805461079e9061447f565b80601f01602080910402602001604051908101604052809291908181526020018280546107ca9061447f565b80156108175780601f106107ec57610100808354040283529160200191610817565b820191906000526020600020905b8154815290600101906020018083116107fa57829003601f168201915b5050505050905090565b60008061082c612686565b905061083981858561268e565b600191505092915050565b6000600254905090565b600080610859612686565b9050610866858285612859565b6108718585856128e5565b60019150509392505050565b600034116108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790613f6f565b60405180910390fd5b6000346108cb611b51565b6108d5919061433b565b905060006108e161115d565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b8152600401610940929190613c86565b600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b50505050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b81526004016109cf929190613c86565b600060405180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330346040518463ffffffff1660e01b8152600401610a6093929190613c4f565b602060405180830381600087803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab2919061371a565b5060003483610ac191906140e9565b8234610acd91906142e1565b610ad7919061413f565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b36929190613c86565b602060405180830381600087803b158015610b5057600080fd5b505af1158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b88919061371a565b503373ffffffffffffffffffffffffffffffffffffffff167feff24ae1a526a59e44052f06c0e3fc3e2328bc71d8eaadc772a1a42ce563f3313483604051610bd192919061404f565b60405180910390a2505050565b60003411610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1890613f6f565b60405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b8152600401610c7e929190613c86565b600060405180830381600087803b158015610c9857600080fd5b505af1158015610cac573d6000803e3d6000fd5b50505050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933346040518363ffffffff1660e01b8152600401610d0d929190613c86565b600060405180830381600087803b158015610d2757600080fd5b505af1158015610d3b573d6000803e3d6000fd5b505050506000610d49611b51565b9050600034610d5661115d565b610d60919061433b565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330346040518463ffffffff1660e01b8152600401610dc193929190613c4f565b602060405180830381600087803b158015610ddb57600080fd5b505af1158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e13919061371a565b5060003482610e2291906140e9565b8334610e2e91906142e1565b610e38919061413f565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610e97929190613c86565b602060405180830381600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee9919061371a565b503373ffffffffffffffffffffffffffffffffffffffff167feff24ae1a526a59e44052f06c0e3fc3e2328bc71d8eaadc772a1a42ce563f3313483604051610f32929190614013565b60405180910390a2505050565b60006012905090565b601260009054906101000a900460ff1681565b82600b600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490613f4f565b60405180910390fd5b600b600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2837f654e38d2a93112689c11f1c8b02342b0e0adab42ec9f0d00ea593cf9dd9ef8eb8484604051611092929190613fea565b60405180910390a2826010819055508160118190555060115460105411156110d5576001601260006101000a81548160ff021916908360ff160217905550611120565b6011546010541415611102576002601260006101000a81548160ff021916908360ff16021790555061111f565b6003601260006101000a81548160ff021916908360ff1602179055505b5b50505050565b600080611131612686565b90506111528185856111438589612555565b61114d91906140e9565b61268e565b600191505092915050565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111bb9190613bfd565b60206040518083038186803b1580156111d357600080fd5b505afa1580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b91906137ce565b90508091505090565b61121c612b66565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398faf2cb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b50505050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398faf2cb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561130857600080fd5b505af115801561131c573d6000803e3d6000fd5b50505050565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016113809190613bfd565b60206040518083038186803b15801561139857600080fd5b505afa1580156113ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d091906137ce565b90508091505090565b60006113ef600e54306337d36fef60e01b612be4565b90506114536040518060400160405280600981526020017f75726c524553554c5400000000000000000000000000000000000000000000008152506040518060a00160405280606b8152602001614ac6606b913983612c159092919063ffffffff16565b6114d26040518060400160405280600881526020017f70617468484f4d450000000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f302c486f6d655465616d53636f7265000000000000000000000000000000000081525083612c159092919063ffffffff16565b6115516040518060400160405280600881526020017f70617468415741590000000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f302c417761795465616d53636f7265000000000000000000000000000000000081525083612c159092919063ffffffff16565b61155d81600f54612c48565b5050565b611569612b66565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336115b061115d565b6040518363ffffffff1660e01b81526004016115cd929190613c86565b602060405180830381600087803b1580156115e757600080fd5b505af11580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061371a565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33611667611b51565b6040518363ffffffff1660e01b8152600401611684929190613c86565b602060405180830381600087803b15801561169e57600080fd5b505af11580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d6919061371a565b50565b60105481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61172f612b66565b6117396000612c7f565b565b611743612b66565b600061174d612479565b141561178e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178590613eef565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166117af612479565b6040516117bb90613be8565b60006040518083038185875af1925050503d80600081146117f8576040519150601f19603f3d011682016040523d82523d6000602084013e6117fd565b606091505b5050905080611841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183890613f8f565b60405180910390fd5b50565b600047905090565b611854612b66565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016118b393929190613c18565b602060405180830381600087803b1580156118cd57600080fd5b505af11580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611905919061371a565b50600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161196593929190613c18565b602060405180830381600087803b15801561197f57600080fd5b505af1158015611993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b7919061371a565b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6119ee612b66565b60006119f8612d45565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a509190613bfd565b60206040518083038186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa091906137ce565b6040518363ffffffff1660e01b8152600401611abd929190613c86565b602060405180830381600087803b158015611ad757600080fd5b505af1158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f919061371a565b611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4590613eaf565b60405180910390fd5b50565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611baf9190613bfd565b60206040518083038186803b158015611bc757600080fd5b505afa158015611bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bff91906137ce565b90508091505090565b606060048054611c179061447f565b80601f0160208091040260200160405190810160405280929190818152602001828054611c439061447f565b8015611c905780601f10611c6557610100808354040283529160200191611c90565b820191906000526020600020905b815481529060010190602001808311611c7357829003601f168201915b5050505050905090565b600080611ca5612686565b90506000611cb38286612555565b905083811015611cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cef90613faf565b60405180910390fd5b611d05828686840361268e565b60019250505092915050565b600080611d1c612686565b9050611d298185856128e5565b600191505092915050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601260009054906101000a900460ff1660ff1611611daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da690613e8f565b60405180910390fd5b6000611db9611322565b90506000611dc5612498565b90506001601260009054906101000a900460ff1660ff161415611ff857600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611e4193929190613c4f565b602060405180830381600087803b158015611e5b57600080fd5b505af1158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e93919061371a565b50600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611ef393929190613c4f565b602060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f45919061371a565b5060003373ffffffffffffffffffffffffffffffffffffffff1683604051611f6c90613be8565b60006040518083038185875af1925050503d8060008114611fa9576040519150601f19603f3d011682016040523d82523d6000602084013e611fae565b606091505b5050905080611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe990613e6f565b60405180910390fd5b50612475565b6003601260009054906101000a900460ff1660ff16141561222957600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161207293929190613c4f565b602060405180830381600087803b15801561208c57600080fd5b505af11580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c4919061371a565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161212493929190613c4f565b602060405180830381600087803b15801561213e57600080fd5b505af1158015612152573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612176919061371a565b5060003373ffffffffffffffffffffffffffffffffffffffff168260405161219d90613be8565b60006040518083038185875af1925050503d80600081146121da576040519150601f19603f3d011682016040523d82523d6000602084013e6121df565b606091505b5050905080612223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221a90613e6f565b60405180910390fd5b50612474565b6002601260009054906101000a900460ff1660ff161415612473576000828261225291906140e9565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016122b393929190613c4f565b602060405180830381600087803b1580156122cd57600080fd5b505af11580156122e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612305919061371a565b50600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161236593929190613c4f565b602060405180830381600087803b15801561237f57600080fd5b505af1158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b7919061371a565b5060003373ffffffffffffffffffffffffffffffffffffffff166002836123de919061413f565b6040516123ea90613be8565b60006040518083038185875af1925050503d8060008114612427576040519150601f19603f3d011682016040523d82523d6000602084013e61242c565b606091505b5050905080612470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246790613e6f565b60405180910390fd5b50505b5b5b5050565b60003373ffffffffffffffffffffffffffffffffffffffff1631905090565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016124f69190613bfd565b60206040518083038186803b15801561250e57600080fd5b505afa158015612522573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254691906137ce565b90508091505090565b60115481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6125e4612b66565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264b90613dcf565b60405180910390fd5b61265d81612c7f565b50565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f590613f2f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561276e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276590613def565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161284c9190613fcf565b60405180910390a3505050565b60006128658484612555565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146128df57818110156128d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c890613e2f565b60405180910390fd5b6128de848484840361268e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294c90613f0f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bc90613daf565b60405180910390fd5b6129d0838383612d6f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4d90613e4f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ae991906140e9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b4d9190613fcf565b60405180910390a3612b60848484612d74565b50505050565b612b6e612686565b73ffffffffffffffffffffffffffffffffffffffff16612b8c6119bc565b73ffffffffffffffffffffffffffffffffffffffff1614612be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd990613ecf565b60405180910390fd5b565b612bec613525565b612bf4613525565b612c0b85858584612d79909392919063ffffffff16565b9150509392505050565b612c2c828460800151612e2990919063ffffffff16565b612c43818460800151612e2990919063ffffffff16565b505050565b6000612c77600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484612e4e565b905092915050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b505050565b505050565b612d81613525565b612d918560800151610100612f1a565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b612e368260038351612f84565b612e49818361310990919063ffffffff16565b505050565b600080600a549050600181612e6391906140e9565b600a819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401612ea4989796959493929190613caf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612f0f8683868461312b565b925050509392505050565b612f22613592565b6000602083612f3191906144df565b14612f5d57602082612f4391906144df565b6020612f4f919061433b565b82612f5a91906140e9565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611612fbb57612fb58160058460ff16901b60ff1617846132cf90919063ffffffff16565b50613104565b60ff8167ffffffffffffffff161161301157612fea601860058460ff16901b17846132cf90919063ffffffff16565b5061300b8167ffffffffffffffff166001856132ef9092919063ffffffff16565b50613103565b61ffff8167ffffffffffffffff161161306857613041601960058460ff16901b17846132cf90919063ffffffff16565b506130628167ffffffffffffffff166002856132ef9092919063ffffffff16565b50613102565b63ffffffff8167ffffffffffffffff16116130c15761309a601a60058460ff16901b17846132cf90919063ffffffff16565b506130bb8167ffffffffffffffff166004856132ef9092919063ffffffff16565b50613101565b6130de601b60058460ff16901b17846132cf90919063ffffffff16565b506130ff8167ffffffffffffffff166008856132ef9092919063ffffffff16565b505b5b5b5b505050565b613111613592565b61312383846000015151848551613311565b905092915050565b60003084604051602001613140929190613bbc565b60405160208183030381529060405280519060200120905084600b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b815260040161323693929190613d34565b602060405180830381600087803b15801561325057600080fd5b505af1158015613264573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613288919061371a565b6132c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132be90613e0f565b60405180910390fd5b949350505050565b6132d7613592565b6132e78384600001515184613400565b905092915050565b6132f7613592565b613308848560000151518585613457565b90509392505050565b613319613592565b825182111561332757600080fd5b8460200151828561333891906140e9565b111561336d5761336c85600261335d8860200151888761335891906140e9565b6134e5565b61336791906142e1565b613501565b5b60008086518051876020830101935080888701111561338c5787860182525b60208701925050505b602084106133d357805182526020826133ae91906140e9565b91506020816133bd91906140e9565b90506020846133cc919061433b565b9350613395565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b613408613592565b8360200151831061342e5761342d846002866020015161342891906142e1565b613501565b5b835180516020858301018481538186141561344a576001820183525b5050508390509392505050565b61345f613592565b8460200151848361347091906140e9565b111561349857613497856002868561348891906140e9565b61349291906142e1565b613501565b5b60006001836101006134aa91906141c3565b6134b4919061433b565b905085518386820101858319825116178152815185880111156134d75784870182525b505085915050949350505050565b6000818311156134f7578290506134fb565b8190505b92915050565b6000826000015190506135148383612f1a565b5061351f8382613109565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161358c613592565b81525090565b604051806040016040528060608152602001600081525090565b6000813590506135bb81614a52565b92915050565b6000815190506135d081614a69565b92915050565b6000813590506135e581614a80565b92915050565b6000813590506135fa81614a97565b92915050565b60008135905061360f81614aae565b92915050565b60008151905061362481614aae565b92915050565b60006020828403121561363c57600080fd5b600061364a848285016135ac565b91505092915050565b6000806040838503121561366657600080fd5b6000613674858286016135ac565b9250506020613685858286016135ac565b9150509250929050565b6000806000606084860312156136a457600080fd5b60006136b2868287016135ac565b93505060206136c3868287016135ac565b92505060406136d486828701613600565b9150509250925092565b600080604083850312156136f157600080fd5b60006136ff858286016135ac565b925050602061371085828601613600565b9150509250929050565b60006020828403121561372c57600080fd5b600061373a848285016135c1565b91505092915050565b60008060006060848603121561375857600080fd5b6000613766868287016135d6565b935050602061377786828701613600565b925050604061378886828701613600565b9150509250925092565b600080604083850312156137a557600080fd5b60006137b3858286016135eb565b92505060206137c4858286016135eb565b9150509250929050565b6000602082840312156137e057600080fd5b60006137ee84828501613615565b91505092915050565b6138008161436f565b82525050565b61380f81614381565b82525050565b61381e8161438d565b82525050565b61382d81614397565b82525050565b600061383e826140a6565b61384881856140bc565b935061385881856020860161444c565b6138618161459d565b840191505092915050565b61387d61387882614416565b6144b1565b82525050565b600061388e826140b1565b61389881856140d8565b93506138a881856020860161444c565b6138b18161459d565b840191505092915050565b60006138c96023836140d8565b91506138d4826145c8565b604082019050919050565b60006138ec6026836140d8565b91506138f782614617565b604082019050919050565b600061390f6022836140d8565b915061391a82614666565b604082019050919050565b60006139326013836140d8565b915061393d826146b5565b602082019050919050565b60006139556023836140d8565b9150613960826146de565b604082019050919050565b6000613978601d836140d8565b91506139838261472d565b602082019050919050565b600061399b6026836140d8565b91506139a682614756565b604082019050919050565b60006139be6014836140d8565b91506139c9826147a5565b602082019050919050565b60006139e1601b836140d8565b91506139ec826147ce565b602082019050919050565b6000613a046013836140d8565b9150613a0f826147f7565b602082019050919050565b6000613a276012836140d8565b9150613a3282614820565b602082019050919050565b6000613a4a6020836140d8565b9150613a5582614849565b602082019050919050565b6000613a6d6021836140d8565b9150613a7882614872565b604082019050919050565b6000613a906025836140d8565b9150613a9b826148c1565b604082019050919050565b6000613ab36000836140cd565b9150613abe82614910565b600082019050919050565b6000613ad66024836140d8565b9150613ae182614913565b604082019050919050565b6000613af96028836140d8565b9150613b0482614962565b604082019050919050565b6000613b1c601c836140d8565b9150613b27826149b1565b602082019050919050565b6000613b3f601a836140d8565b9150613b4a826149da565b602082019050919050565b6000613b626025836140d8565b9150613b6d82614a03565b604082019050919050565b613b818161443a565b82525050565b613b90816143ff565b82525050565b613ba7613ba2826143ff565b6144d5565b82525050565b613bb681614409565b82525050565b6000613bc8828561386c565b601482019150613bd88284613b96565b6020820191508190509392505050565b6000613bf382613aa6565b9150819050919050565b6000602082019050613c1260008301846137f7565b92915050565b6000606082019050613c2d60008301866137f7565b613c3a60208301856137f7565b613c476040830184613b78565b949350505050565b6000606082019050613c6460008301866137f7565b613c7160208301856137f7565b613c7e6040830184613b87565b949350505050565b6000604082019050613c9b60008301856137f7565b613ca86020830184613b87565b9392505050565b600061010082019050613cc5600083018b6137f7565b613cd2602083018a613b87565b613cdf6040830189613815565b613cec60608301886137f7565b613cf96080830187613824565b613d0660a0830186613b87565b613d1360c0830185613b87565b81810360e0830152613d258184613833565b90509998505050505050505050565b6000606082019050613d4960008301866137f7565b613d566020830185613b87565b8181036040830152613d688184613833565b9050949350505050565b6000602082019050613d876000830184613806565b92915050565b60006020820190508181036000830152613da78184613883565b905092915050565b60006020820190508181036000830152613dc8816138bc565b9050919050565b60006020820190508181036000830152613de8816138df565b9050919050565b60006020820190508181036000830152613e0881613902565b9050919050565b60006020820190508181036000830152613e2881613948565b9050919050565b60006020820190508181036000830152613e488161396b565b9050919050565b60006020820190508181036000830152613e688161398e565b9050919050565b60006020820190508181036000830152613e88816139b1565b9050919050565b60006020820190508181036000830152613ea8816139d4565b9050919050565b60006020820190508181036000830152613ec881613a1a565b9050919050565b60006020820190508181036000830152613ee881613a3d565b9050919050565b60006020820190508181036000830152613f0881613a60565b9050919050565b60006020820190508181036000830152613f2881613a83565b9050919050565b60006020820190508181036000830152613f4881613ac9565b9050919050565b60006020820190508181036000830152613f6881613aec565b9050919050565b60006020820190508181036000830152613f8881613b0f565b9050919050565b60006020820190508181036000830152613fa881613b32565b9050919050565b60006020820190508181036000830152613fc881613b55565b9050919050565b6000602082019050613fe46000830184613b87565b92915050565b6000604082019050613fff6000830185613b87565b61400c6020830184613b87565b9392505050565b60006060820190506140286000830185613b87565b6140356020830184613b87565b818103604083015261404681613925565b90509392505050565b60006060820190506140646000830185613b87565b6140716020830184613b87565b8181036040830152614082816139f7565b90509392505050565b60006020820190506140a06000830184613bad565b92915050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006140f4826143ff565b91506140ff836143ff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561413457614133614510565b5b828201905092915050565b600061414a826143ff565b9150614155836143ff565b9250826141655761416461453f565b5b828204905092915050565b6000808291508390505b60018511156141ba5780860481111561419657614195614510565b5b60018516156141a55780820291505b80810290506141b3856145bb565b945061417a565b94509492505050565b60006141ce826143ff565b91506141d9836143ff565b92506142067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461420e565b905092915050565b60008261421e57600190506142da565b8161422c57600090506142da565b8160018114614242576002811461424c5761427b565b60019150506142da565b60ff84111561425e5761425d614510565b5b8360020a91508482111561427557614274614510565b5b506142da565b5060208310610133831016604e8410600b84101617156142b05782820a9050838111156142ab576142aa614510565b5b6142da565b6142bd8484846001614170565b925090508184048111156142d4576142d3614510565b5b81810290505b9392505050565b60006142ec826143ff565b91506142f7836143ff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143305761432f614510565b5b828202905092915050565b6000614346826143ff565b9150614351836143ff565b92508282101561436457614363614510565b5b828203905092915050565b600061437a826143df565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061442182614428565b9050919050565b6000614433826143df565b9050919050565b6000614445826143c3565b9050919050565b60005b8381101561446a57808201518184015260208101905061444f565b83811115614479576000848401525b50505050565b6000600282049050600182168061449757607f821691505b602082108114156144ab576144aa61456e565b5b50919050565b60006144bc826144c3565b9050919050565b60006144ce826145ae565b9050919050565b6000819050919050565b60006144ea826143ff565b91506144f5836143ff565b9250826145055761450461453f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f6465706f7369745f73776170425241746f465200000000000000000000000000600082015250565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b7f546865206d61746368206973206e6f742066696e697368207965740000000000600082015250565b7f6465706f7369745f737761704652746f42524100000000000000000000000000600082015250565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5468657265206973206e6f204d6174696320696e2074686520436f6e7472616360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b50565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b7f596f75206469646e27742070726f7669646520616e792066756e647300000000600082015250565b7f4661696c75726520436f75646e27742073656e64204d61746963000000000000600082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b614a5b8161436f565b8114614a6657600080fd5b50565b614a7281614381565b8114614a7d57600080fd5b50565b614a898161438d565b8114614a9457600080fd5b50565b614aa0816143c3565b8114614aab57600080fd5b50565b614ab7816143ff565b8114614ac257600080fd5b5056fe68747470733a2f2f6170692e73706f727473646174612e696f2f76332f736f636365722f73636f7265732f6a736f6e2f47616d65734279446174652f323032322d31312d31353f6b65793d6135616363366363343464633437666339393138313938643239623333653030a2646970667358221220a9399e94c2d1f5668d0ff44b69481be8e4454829d1873049a836ae94bf9e780464736f6c63430008040033","abi":[{"inputs":[{"internalType":"address","name":"_FranceTokenAddress","type":"address"},{"internalType":"address","name":"_BrasilTokenAddress","type":"address"},{"internalType":"address","name":"_LinkToken","type":"address"},{"internalType":"address","name":"_LinkOracle","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokenReceived","type":"uint256"},{"indexed":false,"internalType":"string","name":"functionName","type":"string"}],"name":"DepositMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"homeScore","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"awayScore","type":"uint256"}],"name":"RequestMultipleFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount_team1_wallet","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount_team2_wallet","type":"uint256"}],"name":"UserInformation","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"BrasilTokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FinalResult","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FranceTokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint128","name":"_amountTeamA","type":"uint128"},{"internalType":"uint128","name":"_amountTeamB","type":"uint128"}],"name":"addLiquidity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"awayScore","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deposit_swapBRAtoFR","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"deposit_swapFRtoBRA","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"homeResponse","type":"uint256"},{"internalType":"uint256","name":"awayResponse","type":"uint256"}],"name":"fulfillMultipleParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"gameOver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getBalanceWalletBrasil","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalanceWalletFrance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReserveBrasil","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReserveFrance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"homeScore","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ownTokenContracts","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"removeLiquidity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestMultipleParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"walletBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawLink","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawMatic","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}]}